//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/_F747/Input/PlayerInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAction"",
    ""maps"": [
        {
            ""name"": ""MainPlayer"",
            ""id"": ""3ac0d8c6-b78b-4f03-90cd-7a987e72b3a3"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""787fec16-b047-4ec5-9439-cc44e937668b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5d8b08a3-ac35-4efe-9cf7-762b048fe486"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""cd0c92b1-aa06-48cf-81c6-040012efffac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""5f0dc4a7-178c-4c6e-b8fe-af14a41bf0f4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""b2966d47-64c5-4cc8-9afc-b3e2abd1efa5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Return"",
                    ""type"": ""Button"",
                    ""id"": ""860f6273-84fa-4f8f-afe3-9e5ff3d6ab6f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""09df9e9a-03a8-432b-948d-9e25d742c081"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b38384a7-9b8c-4d32-8f75-ad5add2f9807"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""cb26dc2d-4c4a-4c1f-a66e-b7b6749d53e8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""aa56d87c-b109-4a82-8cd9-9b1d4b51db92"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""aea058bf-8037-47c2-a470-e11fb9245ec0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""898ec1ad-5ccc-413c-9ba0-8168b21b2dea"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""29e58ded-b9d3-4f62-a89d-19585da8469a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""de733417-4aa5-4fb9-b510-195b3dc11646"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1177046d-92ac-43b8-b1cb-2ce809003f09"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c14bece-ba4e-4961-88b7-36949470f0d6"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf0bc9f4-c0e8-420f-8ca5-65932e2fd419"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Return"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93c6df83-38b8-4b16-963e-83b6ad988683"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5915e54-5d65-4a45-a42c-1af5fd3ba050"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainPlayer
        m_MainPlayer = asset.FindActionMap("MainPlayer", throwIfNotFound: true);
        m_MainPlayer_Look = m_MainPlayer.FindAction("Look", throwIfNotFound: true);
        m_MainPlayer_Move = m_MainPlayer.FindAction("Move", throwIfNotFound: true);
        m_MainPlayer_Inventory = m_MainPlayer.FindAction("Inventory", throwIfNotFound: true);
        m_MainPlayer_Interact = m_MainPlayer.FindAction("Interact", throwIfNotFound: true);
        m_MainPlayer_Escape = m_MainPlayer.FindAction("Escape", throwIfNotFound: true);
        m_MainPlayer_Return = m_MainPlayer.FindAction("Return", throwIfNotFound: true);
        m_MainPlayer_Attack = m_MainPlayer.FindAction("Attack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainPlayer
    private readonly InputActionMap m_MainPlayer;
    private IMainPlayerActions m_MainPlayerActionsCallbackInterface;
    private readonly InputAction m_MainPlayer_Look;
    private readonly InputAction m_MainPlayer_Move;
    private readonly InputAction m_MainPlayer_Inventory;
    private readonly InputAction m_MainPlayer_Interact;
    private readonly InputAction m_MainPlayer_Escape;
    private readonly InputAction m_MainPlayer_Return;
    private readonly InputAction m_MainPlayer_Attack;
    public struct MainPlayerActions
    {
        private @PlayerInputAction m_Wrapper;
        public MainPlayerActions(@PlayerInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_MainPlayer_Look;
        public InputAction @Move => m_Wrapper.m_MainPlayer_Move;
        public InputAction @Inventory => m_Wrapper.m_MainPlayer_Inventory;
        public InputAction @Interact => m_Wrapper.m_MainPlayer_Interact;
        public InputAction @Escape => m_Wrapper.m_MainPlayer_Escape;
        public InputAction @Return => m_Wrapper.m_MainPlayer_Return;
        public InputAction @Attack => m_Wrapper.m_MainPlayer_Attack;
        public InputActionMap Get() { return m_Wrapper.m_MainPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainPlayerActions set) { return set.Get(); }
        public void SetCallbacks(IMainPlayerActions instance)
        {
            if (m_Wrapper.m_MainPlayerActionsCallbackInterface != null)
            {
                @Look.started -= m_Wrapper.m_MainPlayerActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_MainPlayerActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_MainPlayerActionsCallbackInterface.OnLook;
                @Move.started -= m_Wrapper.m_MainPlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MainPlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MainPlayerActionsCallbackInterface.OnMove;
                @Inventory.started -= m_Wrapper.m_MainPlayerActionsCallbackInterface.OnInventory;
                @Inventory.performed -= m_Wrapper.m_MainPlayerActionsCallbackInterface.OnInventory;
                @Inventory.canceled -= m_Wrapper.m_MainPlayerActionsCallbackInterface.OnInventory;
                @Interact.started -= m_Wrapper.m_MainPlayerActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_MainPlayerActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_MainPlayerActionsCallbackInterface.OnInteract;
                @Escape.started -= m_Wrapper.m_MainPlayerActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_MainPlayerActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_MainPlayerActionsCallbackInterface.OnEscape;
                @Return.started -= m_Wrapper.m_MainPlayerActionsCallbackInterface.OnReturn;
                @Return.performed -= m_Wrapper.m_MainPlayerActionsCallbackInterface.OnReturn;
                @Return.canceled -= m_Wrapper.m_MainPlayerActionsCallbackInterface.OnReturn;
                @Attack.started -= m_Wrapper.m_MainPlayerActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_MainPlayerActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_MainPlayerActionsCallbackInterface.OnAttack;
            }
            m_Wrapper.m_MainPlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Inventory.started += instance.OnInventory;
                @Inventory.performed += instance.OnInventory;
                @Inventory.canceled += instance.OnInventory;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
                @Return.started += instance.OnReturn;
                @Return.performed += instance.OnReturn;
                @Return.canceled += instance.OnReturn;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
            }
        }
    }
    public MainPlayerActions @MainPlayer => new MainPlayerActions(this);
    public interface IMainPlayerActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
        void OnReturn(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
    }
}
